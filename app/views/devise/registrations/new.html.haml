= javascript_include_tag "https://cdnjs.cloudflare.com/ajax/libs/jquery-validate/1.13.1/jquery.validate.min.js"
= javascript_include_tag "https://cdnjs.cloudflare.com/ajax/libs/jquery.payment/1.2.3/jquery.payment.min.js"
= javascript_include_tag "https://js.stripe.com/v2/"
.row.signup_page
  .col-xs-12.col-md-4.col-md-offset-4
    = form_for(resource, as: resource_name, url: registration_path(resource_name), html:{id:"payment-form",role:"form"}) do |f|
      = devise_error_messages!
      = hidden_field_tag :stripe_token
      = hidden_field_tag :plan, params[:plan]
      #loginSignupHead.content{style:"margin-top: 50px;"}
        Signup For An Account
      .ui.stacked.segment
        .field
          #colorFix.ui.left.input
            = f.text_field :first_name, :placeholder=>'First Name', autofocus: true
        .field
          #colorFix.ui.left.input
            = f.text_field :last_name, :placeholder=>'Last Name'
        .field
          #colorFix.ui.left.icon.input
            = f.email_field :email, :placeholder=>'Email'
            %i.user.icon
        .field
          - if @minimum_password_length
            %em
              (#{@minimum_password_length} characters minimum)
          #colorFix.ui.left.icon.input
            = f.password_field :password, :placeholder=> "Password", autocomplete: "off"
            %i.lock.icon
        .field
          #colorFix.ui.left.icon.input
            = f.password_field :password_confirmation, :placeholder=> "Confirm Password", autocomplete: "off"
            %i.lock.icon
        .field
          #colorFix.ui.left.input
            = f.text_field :company_id, :placeholder=>"Company ID"
        .field
          #colorFix.ui.left.input
            = f.text_field :employee_id, :placeholder=>"Employee ID"
        .field
          #colorFix.ui.left.input
            = f.select :user_type, User.user_types.keys.map { |w| [w.humanize, w] }, class:"ui fluid dropdown"
      .panel.panel-default.credit-card-box
      .panel-heading.display-table
        .row.display-tr
          %h3.panel-title.display-td Payment Details
          .display-td
            %img.img-responsive.pull-right{:src => "http://i76.imgup.net/accepted_c22e0.png"}/
      .panel-body
        .row
          .col-xs-12
            .form-group
              %label{:for => "cardNumber"} CARD NUMBER
              .input-group
                %input.form-control{:autocomplete => "cc-number", :autofocus => "", :name => "cardNumber", :placeholder => "Valid Card Number", :required => "", :type => "tel"}/
                %span.input-group-addon
                  %i.fa.fa-credit-card
        .row
          .col-xs-7.col-md-7
            .form-group
              %label{:for => "cardExpiry"}
                %span.hidden-xs EXPIRATION
                %span.visible-xs-inline EXP DATE
              %input.form-control{:autocomplete => "cc-exp", :name => "cardExpiry", :placeholder => "MM / YY", :required => "", :type => "tel"}/
          .col-xs-5.col-md-5.pull-right
            .form-group
              %label{:for => "cardCVC"} CV CODE
              %input.form-control{:autocomplete => "cc-csc", :name => "cardCVC", :placeholder => "CVC", :required => "", :type => "tel"}/
        .row
          .col-xs-12
            %button.subscribe.btn.btn-success.btn-lg.btn-block{:type => "button"} Start Subscription
        .row{:style => "display:none;"}
          .col-xs-12
            %p.payment-errors

:javascript
  var $form = $('#payment-form');
  $form.find('.subscribe').on('click', payWithStripe);

  /* If you're using Stripe for payments */
  function payWithStripe(e) {
      e.preventDefault();

      /* Abort if invalid form data */
      if (!validator.form()) {
          return;
      }

      /* Visual feedback */
      $form.find('.subscribe').html('Validating <i class="fa fa-spinner fa-pulse"></i>').prop('disabled', true);

      var PublishableKey = "#{Rails.application.secrets.stripe_publishable_key}";
      Stripe.setPublishableKey(PublishableKey);

      /* Create token */
      var expiry = $form.find('[name=cardExpiry]').payment('cardExpiryVal');
      var ccData = {
          number: $form.find('[name=cardNumber]').val().replace(/\s/g,''),
          cvc: $form.find('[name=cardCVC]').val(),
          exp_month: expiry.month,
          exp_year: expiry.year
      };

      Stripe.card.createToken(ccData, function stripeResponseHandler(status, response) {
          if (response.error) {
              /* Visual feedback */
              $form.find('.subscribe').html('Try again').prop('disabled', false);
              /* Show Stripe errors on the form */
              $form.find('.payment-errors').text(response.error.message);
              $form.find('.payment-errors').closest('.row').show();
          } else {
              /* Visual feedback */
              $form.find('.subscribe').html('Processing <i class="fa fa-spinner fa-pulse"></i>');
              /* Hide Stripe errors on the form */
              $form.find('.payment-errors').closest('.row').hide();
              $form.find('.payment-errors').text("");
              // response contains id and card, which contains additional card details
              console.log(response.id);
              console.log(response.card);
              var token = response.id;
              $("#stripe_token").val(token);
              data = $form.serialize();
              console.log(data);
              $form.submit();
              // AJAX - you would send 'token' to your server here.
              /*
              $.post('/users', data)
                  // Assign handlers immediately after making the request,
                  .done(function(data, textStatus, jqXHR) {
                      $form.find('.subscribe').html('Payment successful <i class="fa fa-check"></i>');
                  })
                  .fail(function(jqXHR, textStatus, errorThrown) {
                      $form.find('.subscribe').html('There was a problem').removeClass('success').addClass('error');
                      /* Show Stripe errors on the form */
                /*      $form.find('.payment-errors').text('Try refreshing the page and trying again.');
                      $form.find('.payment-errors').closest('.row').show();
                  });
                */
          }
      });
  }
  /* Fancy restrictive input formatting via jQuery.payment library*/
  $('input[name=cardNumber]').payment('formatCardNumber');
  $('input[name=cardCVC]').payment('formatCardCVC');
  $('input[name=cardExpiry').payment('formatCardExpiry');

  /* Form validation using Stripe client-side validation helpers */
  jQuery.validator.addMethod("cardNumber", function(value, element) {
      return this.optional(element) || Stripe.card.validateCardNumber(value);
  }, "Please specify a valid credit card number.");

  jQuery.validator.addMethod("cardExpiry", function(value, element) {
      /* Parsing month/year uses jQuery.payment library */
      value = $.payment.cardExpiryVal(value);
      return this.optional(element) || Stripe.card.validateExpiry(value.month, value.year);
  }, "Invalid expiration date.");

  jQuery.validator.addMethod("cardCVC", function(value, element) {
      return this.optional(element) || Stripe.card.validateCVC(value);
  }, "Invalid CVC.");

  validator = $form.validate({
      rules: {
          cardNumber: {
              required: true,
              cardNumber: true
          },
          cardExpiry: {
              required: true,
              cardExpiry: true
          },
          cardCVC: {
              required: true,
              cardCVC: true
          }
      },
      highlight: function(element) {
          $(element).closest('.form-control').removeClass('success').addClass('error');
      },
      unhighlight: function(element) {
          $(element).closest('.form-control').removeClass('error').addClass('success');
      },
      errorPlacement: function(error, element) {
          $(element).closest('.form-group').append(error);
      }
  });

  paymentFormReady = function() {
      if ($form.find('[name=cardNumber]').hasClass("success") &&
          $form.find('[name=cardExpiry]').hasClass("success") &&
          $form.find('[name=cardCVC]').val().length > 1) {
          return true;
      } else {
          return false;
      }
  }

  $form.find('.subscribe').prop('disabled', true);
  var readyInterval = setInterval(function() {
      if (paymentFormReady()) {
          $form.find('.subscribe').prop('disabled', false);
          clearInterval(readyInterval);
      }
  }, 250);
